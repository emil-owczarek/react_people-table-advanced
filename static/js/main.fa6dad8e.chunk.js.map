{"version":3,"sources":["pages/HomePage.tsx","components/Navigation/Navigation.tsx","pages/Root.tsx","pages/Error.tsx","components/Loader/Loader.tsx","api.ts","components/PeopleTable/PeopleTable.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters/PeopleFilters.tsx","pages/People.tsx","App.tsx","index.tsx"],"names":["Home","className","MainNavigation","role","isActive","classNames","to","RootLayout","ErrorPage","Loader","API_URL","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeopleTable","people","currentSlug","useParams","slug","location","useLocation","searchParams","URLSearchParams","search","useState","sortField","setSortField","sortOrder","setSortOrder","sexFilter","get","centuryFilter","getAll","nameFilter","filteredPeople","filter","person","sex","name","toLowerCase","includes","length","Math","ceil","born","toString","getSortIcon","field","sortedPeople","handleSort","prevOrder","formatNameForURL","replace","getBirthYearByName","peopleList","find","p","sort","a","b","onClick","map","motherBirthYear","motherName","fatherBirthYear","fatherName","isCurrentPerson","died","getSearchWith","currentParams","paramsToUpdate","newParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","centuriesList","PeopleFilters","setSearchParams","handleCenturyClick","century","c","getActiveClass","label","sexValue","undefined","type","placeholder","onChange","event","query","target","centuries","updatedCenturies","href","PeoplePage","setPeople","loading","setLoading","error","setError","useEffect","data","catch","err","message","finally","router","createHashRouter","path","element","Root","errorElement","Error","People","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa6dad8e.chunk.js","sourcesContent":["function Home() {\n  return <h1 className=\"title\">Home Page</h1>;\n}\n\nexport default Home;\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nfunction MainNavigation() {\n  return (\n    <>\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <NavLink\n              className={({ isActive }) => classNames(\n                'navbar-item', { 'has-background-grey-lighter': isActive },\n              )}\n              to=\"/\"\n            >\n              Home\n            </NavLink>\n            <NavLink\n              className={({ isActive }) => classNames(\n                'navbar-item', { 'has-background-grey-lighter': isActive },\n              )}\n              to=\"/people\"\n            >\n              People\n            </NavLink>\n          </div>\n        </div>\n      </nav>\n    </>\n  );\n}\n\nexport default MainNavigation;\n","import { Outlet } from 'react-router-dom';\nimport MainNavigation from '../components/Navigation/Navigation';\n\nfunction RootLayout() {\n  return (\n    <>\n      <div data-cy=\"app\">\n        <MainNavigation />\n        <div className=\"section\">\n          <div className=\"container\">\n            <Outlet />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default RootLayout;\n","import MainNavigation from '../components/Navigation/Navigation';\n\nfunction ErrorPage() {\n  return (\n    <>\n      <MainNavigation />\n      <div className=\"section\">\n        <div className=\"container\">\n          <h1 className=\"title\">Page not found</h1>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default ErrorPage;\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useState } from 'react';\nimport { Link, useLocation, useParams } from 'react-router-dom';\nimport { Person } from '../../types';\n\ninterface PeopleTableProps {\n  people: Person[];\n}\n\nfunction PeopleTable({ people }: PeopleTableProps) {\n  const { slug: currentSlug } = useParams<{ slug: string }>();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  type SortableFields = 'name' | 'sex' | 'born' | 'died';\n  const [sortField, setSortField] = useState<SortableFields | null>(null);\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\n\n  const sexFilter = searchParams.get('sex');\n  const centuryFilter = searchParams.getAll('centuries');\n  const nameFilter = searchParams.get('query');\n\n  const filteredPeople = people.filter((person) => {\n    if (sexFilter && person.sex !== sexFilter) {\n      return false;\n    }\n\n    if (nameFilter\n      && !person.name.toLowerCase().includes(nameFilter.toLowerCase())) {\n      return false;\n    }\n\n    if (centuryFilter.length > 0\n      && !centuryFilter.includes(Math.ceil(person.born / 100).toString())) {\n      return false;\n    }\n\n    return true;\n  });\n\n  function getSortIcon(field: string) {\n    if (sortField === field) {\n      return sortOrder === 'asc' ? 'fas fa-sort-up' : 'fas fa-sort-down';\n    }\n\n    return 'fas fa-sort';\n  }\n\n  const sortedPeople = [...filteredPeople];\n\n  if (sortField) {\n    sortedPeople.sort((a, b) => {\n      if (a[sortField] > b[sortField]) {\n        return sortOrder === 'asc' ? 1 : -1;\n      }\n\n      if (a[sortField] < b[sortField]) {\n        return sortOrder === 'asc' ? -1 : 1;\n      }\n\n      return 0;\n    });\n  }\n\n  function handleSort(field: SortableFields) {\n    if (sortField === field) {\n      setSortOrder(prevOrder => (prevOrder === 'asc' ? 'desc' : 'asc'));\n    } else {\n      setSortField(field);\n      setSortOrder('asc');\n    }\n  }\n\n  function formatNameForURL(name: string): string {\n    return name.toLowerCase().replace(/\\s+/g, '-');\n  }\n\n  function getBirthYearByName(\n    name: string, peopleList: Person[],\n  ): number | null {\n    const person = peopleList.find(p => p.name === name);\n\n    return person ? person.born : null;\n  }\n\n  return (\n    <div className=\"block\">\n      <div className=\"box table-container\">\n        <table\n          data-cy=\"peopleTable\"\n          className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n        >\n          <thead>\n            <tr>\n              <th onClick={() => handleSort('name')}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  Name\n                  <span className=\"icon\">\n                    <i className={getSortIcon('name')} />\n                  </span>\n                </span>\n              </th>\n              <th onClick={() => handleSort('sex')}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  Sex\n                  <span className=\"icon\">\n                    <i className={getSortIcon('sex')} />\n                  </span>\n                </span>\n              </th>\n              <th onClick={() => handleSort('born')}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  Born\n                  <span className=\"icon\">\n                    <i className={getSortIcon('born')} />\n                  </span>\n                </span>\n              </th>\n              <th onClick={() => handleSort('died')}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  Died\n                  <span className=\"icon\">\n                    <i className={getSortIcon('died')} />\n                  </span>\n                </span>\n              </th>\n              <th>Mother</th>\n              <th>Father</th>\n            </tr>\n          </thead>\n          <tbody>\n            {sortedPeople.map(person => {\n              const motherBirthYear = person.motherName\n                ? getBirthYearByName(person.motherName, people) : null;\n              const fatherBirthYear = person.fatherName\n                ? getBirthYearByName(person.fatherName, people) : null;\n              const isCurrentPerson = `${formatNameForURL(person.name)}-${person.born}` === currentSlug;\n\n              return (\n                <tr\n                  key={person.name}\n                  data-cy=\"person\"\n                  className={isCurrentPerson ? 'has-background-warning' : ''}\n                >\n                  <td>\n                    <Link\n                      to={`/people/${formatNameForURL(person.name)}-${person.born}`}\n                      className={person.sex === 'f' ? 'has-text-danger' : ''}\n                    >\n                      {person.name}\n                    </Link>\n                  </td>\n                  <td>{person.sex}</td>\n                  <td>{person.born}</td>\n                  <td>{person.died}</td>\n                  <td>\n                    {person.motherName && motherBirthYear\n                      ? (\n                        <Link\n                          to={`/people/${formatNameForURL(person.motherName)}-${motherBirthYear}`}\n                          className=\"has-text-danger\"\n                        >\n                          {person.motherName}\n                        </Link>\n                      )\n                      : person.motherName || '-'}\n                  </td>\n                  <td>\n                    {person.fatherName && fatherBirthYear\n                      ? (\n                        <Link\n                          to={`/people/${formatNameForURL(person.fatherName)}-${fatherBirthYear}`}\n                        >\n                          {person.fatherName}\n                        </Link>\n                      )\n                      : person.fatherName || '-'}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default PeopleTable;\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","/* eslint-disable max-len */\nimport { SearchLink } from '../SearchLink';\n\ninterface PeopleFiltersProps {\n  setSearchParams: (params: Record<string, any>) => void;\n  searchParams: URLSearchParams;\n}\n\nconst centuriesList = ['16', '17', '18', '19', '20'];\n\nconst PeopleFilters: React.FC<PeopleFiltersProps>\n= ({ setSearchParams, searchParams }) => {\n  const handleNameFilterChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const query = event.target.value;\n\n    setSearchParams({ ...searchParams, query: query || null });\n  };\n\n  const handleCenturyClick = (century: string): string[] => {\n    const currentCenturies = searchParams.getAll('centuries').includes(century)\n      ? searchParams.getAll('centuries').filter(c => c !== century)\n      : [...searchParams.getAll('centuries'), century];\n\n    return currentCenturies;\n  };\n\n  const handleSexClick = (sex: string | null) => {\n    setSearchParams({ ...searchParams, sex: sex || undefined });\n  };\n\n  const getActiveClass = (key: string, value: string) => {\n    if (key === 'centuries') {\n      return searchParams.getAll(key).includes(value) ? 'is-info' : '';\n    }\n\n    return searchParams.get(key) === value ? 'is-active' : '';\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {['All', 'Male', 'Female'].map(label => {\n          const sexValue = label === 'All' ? '' : label[0].toLowerCase();\n\n          return (\n            <SearchLink\n              key={label}\n              className={getActiveClass('sex', sexValue)}\n              params={{ sex: sexValue }}\n              onClick={() => handleSexClick(sexValue)}\n            >\n              {label}\n            </SearchLink>\n          );\n        })}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={handleNameFilterChange}\n            value={searchParams.get('query') || ''}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesList.map(century => (\n              <SearchLink\n                key={century}\n                className={`button mr-1 ${getActiveClass('centuries', century)}`}\n                params={{ centuries: handleCenturyClick(century) }}\n                onClick={() => {\n                  const updatedCenturies = handleCenturyClick(century);\n\n                  setSearchParams({ ...searchParams, centuries: updatedCenturies });\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n          <div className=\"level-right ml-4\">\n            <SearchLink className=\"button is-success is-outlined\" params={{ centuries: [] }}>\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <a className=\"button is-link is-outlined is-fullwidth\" href=\"#/people\">\n          Reset all filters\n        </a>\n      </div>\n    </nav>\n  );\n};\n\nexport default PeopleFilters;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loader } from '../components/Loader';\nimport { getPeople } from '../api';\nimport PeopleTable from '../components/PeopleTable/PeopleTable';\nimport { Person } from '../types';\nimport PeopleFilters from '../components/PeopleFilters/PeopleFilters';\n\nfunction PeoplePage() {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    getPeople()\n      .then((data) => {\n        setPeople(data);\n      })\n      .catch((err) => {\n        setError(err.message);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [searchParams]);\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  if (error) {\n    return (\n      <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n        Something went wrong\n      </p>\n    );\n  }\n\n  if (people.length === 0) {\n    return (\n      <p data-cy=\"noPeopleMessage\">\n        There are no people on the server\n      </p>\n    );\n  }\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters\n              searchParams={searchParams}\n              setSearchParams={setSearchParams}\n            />\n          </div>\n          <div className=\"column\">\n            <PeopleTable people={people} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default PeoplePage;\n","import { Navigate, createHashRouter, RouterProvider } from 'react-router-dom';\nimport './App.scss';\nimport Home from './pages/HomePage';\nimport RootLayout from './pages/Root';\nimport ErrorPage from './pages/Error';\nimport PeoplePage from './pages/People';\n\nconst router = createHashRouter([{\n  path: '/',\n  element: <RootLayout />,\n  errorElement: <ErrorPage />,\n  children: [\n    { path: '/', element: <Home /> },\n    { path: '/home', element: <Navigate to=\"/\" replace /> },\n    {\n      path: '/people',\n      element: <PeoplePage />,\n      children: [\n        { path: ':slug', element: <PeoplePage /> },\n      ],\n    },\n  ],\n}]);\n\nfunction App() {\n  return (\n\n    <>\n      <div data-cy=\"app\">\n        <RouterProvider router={router} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}